{
  "uid" : "2be607e5f3d4110c",
  "name" : "test_login_fail[case1]",
  "fullName" : "Test_Cases.test_login.Test_login#test_login_fail",
  "historyId" : "ce469f5486b41c2a0f55aee02de55945",
  "time" : {
    "start" : 1666059960103,
    "stop" : 1666059960103,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00BDDF13+2219795]\n\tOrdinal0 [0x00B72841+1779777]\n\tOrdinal0 [0x00A8423D+803389]\n\tOrdinal0 [0x00AA0EC0+921280]\n\tOrdinal0 [0x00A9F179+913785]\n\tOrdinal0 [0x00AD36B9+1128121]\n\tOrdinal0 [0x00AD331A+1127194]\n\tOrdinal0 [0x00ACE616+1107478]\n\tOrdinal0 [0x00AA7F89+950153]\n\tOrdinal0 [0x00AA8F56+954198]\n\tGetHandleVerifier [0x00ED2CB2+3040210]\n\tGetHandleVerifier [0x00EC2BB4+2974420]\n\tGetHandleVerifier [0x00C76A0A+565546]\n\tGetHandleVerifier [0x00C75680+560544]\n\tOrdinal0 [0x00B79A5C+1808988]\n\tOrdinal0 [0x00B7E3A8+1827752]\n\tOrdinal0 [0x00B7E495+1827989]\n\tOrdinal0 [0x00B880A4+1867940]\n\tBaseThreadInitThunk [0x761BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77217B5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77217B2E+238]",
  "statusTrace" : "@pytest.fixture\n    def init():\n        #前置登录网站\n>       driver=webdriver.Chrome()\n\nTest_Cases\\conftest.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:72: in __init__\n    service_log_path, service, keep_alive)\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:97: in __init__\n    options=options)\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AC35457BA8>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot find Chrome binary\",\"stac...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77217B5E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77217B2E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00BDDF13+2219795]\nE       \tOrdinal0 [0x00B72841+1779777]\nE       \tOrdinal0 [0x00A8423D+803389]\nE       \tOrdinal0 [0x00AA0EC0+921280]\nE       \tOrdinal0 [0x00A9F179+913785]\nE       \tOrdinal0 [0x00AD36B9+1128121]\nE       \tOrdinal0 [0x00AD331A+1127194]\nE       \tOrdinal0 [0x00ACE616+1107478]\nE       \tOrdinal0 [0x00AA7F89+950153]\nE       \tOrdinal0 [0x00AA8F56+954198]\nE       \tGetHandleVerifier [0x00ED2CB2+3040210]\nE       \tGetHandleVerifier [0x00EC2BB4+2974420]\nE       \tGetHandleVerifier [0x00C76A0A+565546]\nE       \tGetHandleVerifier [0x00C75680+560544]\nE       \tOrdinal0 [0x00B79A5C+1808988]\nE       \tOrdinal0 [0x00B7E3A8+1827752]\nE       \tOrdinal0 [0x00B7E495+1827989]\nE       \tOrdinal0 [0x00B880A4+1867940]\nE       \tBaseThreadInitThunk [0x761BFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77217B5E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77217B2E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1666059960104,
      "stop" : 1666059962696,
      "duration" : 2592
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00BDDF13+2219795]\n\tOrdinal0 [0x00B72841+1779777]\n\tOrdinal0 [0x00A8423D+803389]\n\tOrdinal0 [0x00AA0EC0+921280]\n\tOrdinal0 [0x00A9F179+913785]\n\tOrdinal0 [0x00AD36B9+1128121]\n\tOrdinal0 [0x00AD331A+1127194]\n\tOrdinal0 [0x00ACE616+1107478]\n\tOrdinal0 [0x00AA7F89+950153]\n\tOrdinal0 [0x00AA8F56+954198]\n\tGetHandleVerifier [0x00ED2CB2+3040210]\n\tGetHandleVerifier [0x00EC2BB4+2974420]\n\tGetHandleVerifier [0x00C76A0A+565546]\n\tGetHandleVerifier [0x00C75680+560544]\n\tOrdinal0 [0x00B79A5C+1808988]\n\tOrdinal0 [0x00B7E3A8+1827752]\n\tOrdinal0 [0x00B7E495+1827989]\n\tOrdinal0 [0x00B880A4+1867940]\n\tBaseThreadInitThunk [0x761BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77217B5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77217B2E+238]\n\n",
    "statusTrace" : "  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py\", line 1121, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py\", line 893, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\Users\\ThinkPad\\PycharmProjects\\pythonProject2\\Test_Cases\\conftest.py\", line 14, in init\n    driver=webdriver.Chrome()\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 72, in __init__\n    service_log_path, service, keep_alive)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 97, in __init__\n    options=options)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 270, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 363, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 428, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\ThinkPad\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('init')"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Cases"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "Test_login"
  }, {
    "name" : "host",
    "value" : "DESKTOP-41KMUJO"
  }, {
    "name" : "thread",
    "value" : "10580-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Cases.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'username': 'taozi', 'passwd': '123456', 'check': 'Invalid username or password. Signon failed.'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('init')" ]
  },
  "source" : "2be607e5f3d4110c.json",
  "parameterValues" : [ "{'username': 'taozi', 'passwd': '123456', 'check': 'Invalid username or password. Signon failed.'}" ]
}